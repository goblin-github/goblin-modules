<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当属性值为 true 时，如果配置文件的内容发现变化，则会重新加载配置文件，默认为 true。
scanPeriod：设置监测配置文件变化的时间间隔，默认值为60 seconds，即60s，如果单位缺省，则默认单位为毫秒。另外，scanPeriod 只有在 scan 属性值为 true 时，才有效。
debug：是否打印 logback 内部的运行日志，默认值为 false，一般无需关心 logback 的内部运行状况
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志保留天数 -->
    <property name="MAX_HISTORY" value="7"/>
    <!-- 定义日志文件总大小 -->
    <property name="TOTAL_SIZE_CAP" value="10GB"/>
    <!-- 定义单个日志文件大小 -->
    <property name="MAX_FILE_SIZE" value="50MB"/>
    <!--定义输出格式-->
    <property name="PATTERN"
              value="[requestId:%X{requestId}] %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %thread %class{35}.%method:%line - %replace(%.-4096msg){'[\r\n]',''}%n"/>
    <!--定义日志输出路径，从配合文件中读取-->
    <springProperty scope="context" name="LOG_PATH" source="logback.path" defaultValue="data/logs"/>
    <springProperty scope="system" name="LOG_SENSITIVE" source="logback.sensitive" defaultValue="false"/>
    <conversionRule conversionWord="msg" converterClass="com.goblin.log.LogbackHelper"/>

    <!-- 输出到控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- 日志输出格式 -->
            <pattern>${PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 只输出DEBUG日志 -->
    <appender name="DEBUG_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/debug.log</file>
        <!-- 基于文件大小和时间的滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/debug/debug.log.%d{yyyy-MM-dd}-%i.gz</fileNamePattern>
            <!-- 日志文件保留天数 -->
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <!-- 日志归档文件总大小 -->
            <totalSizeCap>${TOTAL_SIZE_CAP}</totalSizeCap>
            <!-- 单个日志文件大小 -->
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
        </rollingPolicy>
        <!-- 日志输出格式 -->
        <encoder>
            <pattern>${PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志过滤 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 指定日志级别 -->
            <level>DEBUG</level>
            <!-- 匹配则全部接受 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配则全部拒绝 -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <appender name="DEBUG_LOG_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="DEBUG_LOG"/>
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 提取调用方数据 -->
        <includeCallerData>true</includeCallerData>
        <!-- 设置队列入队时非阻塞，当队列满时会直接丢弃日志 -->
        <neverBlock>true</neverBlock>
    </appender>

    <!-- 只输出INFO日志 -->
    <appender name="INFO_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/info.log</file>
        <!-- 基于文件大小和时间的滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/info/info.log.%d{yyyy-MM-dd}-%i.gz</fileNamePattern>
            <!-- 日志文件保留天数 -->
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <!-- 日志归档文件总大小 -->
            <totalSizeCap>${TOTAL_SIZE_CAP}</totalSizeCap>
            <!-- 单个日志文件大小 -->
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
        </rollingPolicy>
        <!-- 日志输出格式 -->
        <encoder>
            <pattern>${PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志过滤 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 指定日志级别 -->
            <level>INFO</level>
            <!-- 匹配则全部接受 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配则全部拒绝 -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="INFO_LOG_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="INFO_LOG"/>
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 提取调用方数据 -->
        <includeCallerData>true</includeCallerData>
        <!-- 设置队列入队时非阻塞，当队列满时会直接丢弃日志 -->
        <neverBlock>true</neverBlock>
    </appender>

    <!-- 只输出WARN日志 -->
    <appender name="WARN_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/warn.log</file>
        <!-- 基于文件大小和时间的滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/warn/warn.log.%d{yyyy-MM-dd}-%i.gz</fileNamePattern>
            <!-- 日志文件保留天数 -->
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <!-- 日志归档文件总大小 -->
            <totalSizeCap>${TOTAL_SIZE_CAP}</totalSizeCap>
            <!-- 单个日志文件大小 -->
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
        </rollingPolicy>
        <!-- 日志输出格式 -->
        <encoder>
            <pattern>${PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志过滤 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 指定日志级别 -->
            <level>WARN</level>
            <!-- 匹配则全部接受 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配则全部拒绝 -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="WARN_LOG_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="WARN_LOG"/>
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 提取调用方数据 -->
        <includeCallerData>true</includeCallerData>
        <!-- 设置队列入队时非阻塞，当队列满时会直接丢弃日志 -->
        <neverBlock>true</neverBlock>
    </appender>


    <!-- 只输出ERROR日志 -->
    <appender name="ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/error.log</file>
        <!-- 基于文件大小和时间的滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/error/error.log.%d{yyyy-MM-dd}-%i.gz</fileNamePattern>
            <!-- 日志文件保留天数 -->
            <maxHistory>${MAX_HISTORY}</maxHistory>
            <!-- 日志归档文件总大小 -->
            <totalSizeCap>${TOTAL_SIZE_CAP}</totalSizeCap>
            <!-- 单个日志文件大小 -->
            <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
        </rollingPolicy>
        <!-- 日志输出格式 -->
        <encoder>
            <pattern>${PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志过滤 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 指定日志级别 -->
            <level>ERROR</level>
            <!-- 匹配则全部接受 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配则全部拒绝 -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="ERROR_LOG_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="ERROR_LOG"/>
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 提取调用方数据 -->
        <includeCallerData>true</includeCallerData>
        <!-- 设置队列入队时非阻塞，当队列满时会直接丢弃日志 -->
        <neverBlock>true</neverBlock>
    </appender>

    <!-- 多环境配置 -->
    <springProfile name="default,prod">
        <!-- root -->
        <root level="INFO">
            <appender-ref ref="INFO_LOG_ASYNC"/>
            <appender-ref ref="ERROR_LOG_ASYNC"/>
        </root>
    </springProfile>

    <!-- 多环境配置 -->
    <springProfile name="test,pre">
        <!-- root -->
        <root level="DEBUG">
            <appender-ref ref="DEBUG_LOG_ASYNC"/>
            <appender-ref ref="INFO_LOG_ASYNC"/>
            <appender-ref ref="WARN_LOG_ASYNC"/>
            <appender-ref ref="ERROR_LOG_ASYNC"/>
        </root>
    </springProfile>

    <!-- 多环境配置 -->
    <springProfile name="dev">
        <!-- root -->
        <root level="DEBUG">
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>
</configuration>